rm(l)
#Prep 1315 data set ####
dt_1315 <- calculate.logical.flags(dt_1315, "1315")
dt_1315 <- calculate.weights(dt_1315, 1)
dt_1315 <- tidy.tenure(dt_1315)
#Calculate equivalisation weights (according to HBAI spec)
dt_1315<- calculate.equivalise(dt_1315)
#calculate income, including equivalised
dt_1315 <- calculate.household.incomes(dt_1315, "FRS", TRUE)
dt_1315 <- flag.shared.ownership(dt_1315)
dt_1315 <- calculate.bedrooms(dt_1315)
dt_1315 <- tidy.regions(dt_1315, "1315")
dt_1315[ , not_1stbenu := ifelse(BENUNIT >1 , 1, 0)]
dt_1315[ , multiple_benu := ifelse( (sum(not_1stbenu) > 0), 1, 0 ), by = .(SERNUM, year) ]
#LIPR definition flags
#more than 20% of household's gross income from benefits (excluding tax credits) - same as Resolution Foundation definition
dt_1315[ , over20gross_allben := ifelse(((HBENINC - HHTXCRED )/(HHINC)) > 0.2, 1, 0)]
#more than 20% of household income-HB comes from non-HB benefits, modified RF definition
dt_1315[ , over20grossnohb_nohbben := ifelse(!is.na(hh_hbweekly),
(ifelse((HBENINC-hh_hbweekly - HHTXCRED)/(HHINC-hh_hbweekly) > 0.2, 1, 0)),
(ifelse((HBENINC- HHTXCRED)/(HHINC) > 0.2, 1, 0)))]
#remove households from sample with shared status and lodgers
dt1315_noshare <- dt_1315[ (has_lodger == 0 & HHSTAT == 1), ]
#select households with only 1 benefit unit - necessary for current shared ownership/MIS definitions of low income
dt1315_noshare_1bu <- dt1315_noshare[ multiple_benu == 0, ]
#Append AHC Minimum Income Standard for households - only works for 1 benefit unit households atm
dt1315_noshare_1bu <- append.mis(dt1315_noshare_1bu, "./MIS_2015.csv")
#Add for if AHC income is less than AHC MIS
dt1315_noshare_1bu[ , under_ahc_mis := ifelse(hh_gross_ahc < ahc_mis*52, 1, 0)]
#Restrict to households not headed by a pensioner
dt1315_noshare_1bu_nopen <- dt1315_noshare_1bu[ head_pensioner == 0 & is_HRP ==1 & (is.na(grossweight) == F), ]
des1315_nosharenopen <- svydesign(ids = ~1, weights = ~grossweight, data = dt1315_noshare_1bu_nopen[is_HRP & (is.na(grossweight) == F), ])
pc10val_hhgreqinc_nosharenopen <- calculate.percentile.thresholds(DT = dt1315_noshare_1bu_nopen, distr_var = ~hh_grossinc_eq,
region_form = ~GVTREGN, perc_width = "10")
dt1315_noshare_1bu_nopen <- assign.percentile(dt1315_noshare_1bu_nopen, pc10val_hhgreqinc_nosharenopen, "hh_grossinc_eq", perc_width = "10")
colnames(dt1315_noshare_1bu_nopen)[283] <- "pc10position_hhgreqinc_reg"
colnames(dt1315_noshare_1bu_nopen)[284] <- "pc10position_hhgreqinc_nat"
pc10val_hhgreqinc_nohb_nosharenopen <- calculate.percentile.thresholds(DT = dt1315_noshare_1bu_nopen, distr_var = ~hh_grossinc_nohb_eq,
region_form = ~GVTREGN, perc_width = "10")
dt1315_noshare_1bu_nopen <- assign.percentile(dt1315_noshare_1bu_nopen, pc10val_hhgreqinc_nohb_nosharenopen, "hh_grossinc_nohb_eq", perc_width = "10")
colnames(dt1315_noshare_1bu_nopen)[287] <- "pc10position_hhgreqincnohb_reg"
colnames(dt1315_noshare_1bu_nopen)[288] <- "pc10position_hhgreqincnohb_nat"
View(pc10val_hhgreqinc_nosharenopen)
dt1315_noshare_1bu_nopen[, pc10position_hhgreqinc_nat]
head(dt1315_noshare_1bu_nopen)
colnames(dt1315_noshare_1bu_nopen)
dt1315_noshare_1bu_nopen <- dt1315_noshare_1bu[ head_pensioner == 0 & is_HRP ==1 & (is.na(grossweight) == F), ]
dt1315_noshare_1bu_nopen <- assign.percentile(dt1315_noshare_1bu_nopen, pc10val_hhgreqinc_nosharenopen, "hh_grossinc_eq", perc_width = "10")
colnames(dt1315_noshare_1bu_nopen)
colnames(dt1315_noshare_1bu_nopen)[[pc10position_reg]] <- "pc10position_hhgreqinc_reg"
setnames(dt1315_noshare_1bu_nopen, "pc10position_reg", "pc10position_hhgreqinc_reg")
setnames(dt1315_noshare_1bu_nopen, "pc10position_nat", "pc10position_hhgreqinc_nat")
pc10val_hhgreqinc_nohb_nosharenopen <- calculate.percentile.thresholds(DT = dt1315_noshare_1bu_nopen, distr_var = ~hh_grossinc_nohb_eq,
region_form = ~GVTREGN, perc_width = "10")
dt1315_noshare_1bu_nopen <- assign.percentile(dt1315_noshare_1bu_nopen, pc10val_hhgreqinc_nohb_nosharenopen, "hh_grossinc_nohb_eq", perc_width = "10")
setnames(dt1315_noshare_1bu_nopen, "pc10position_reg", "pc10position_hhgreqincnohb_reg")
setnames(dt1315_noshare_1bu_nopen, "pc10position_nat", "pc10position_hhgreqincnohb_nat")
dt1315_noshare_1bu_nopen[ , JAMbase_greqinc := ifelse(pc10position_hhgreqinc_nat >= 2 & pc10position_hhgreqinc_nat <= 5, 1, 0 )]
dt1315_noshare_1bu_nopen[ , JAMrf_greqinc := ifelse((pc10position_hhgreqinc_nat >= 2 & pc10position_hhgreqinc_nat <= 5)
& over20gross_allben == 0, 1, 0 )]
dt1315_noshare_1bu_nopen[ , JAMnohb_greqinc := ifelse((pc10position_hhgreqincnohb_nat >= 2 & pc10position_hhgreqincnohb_nat <= 5), 1, 0 )]
dt1315_noshare_1bu_nopen[ , JAMnohbrf_greqinc := ifelse((pc10position_hhgreqincnohb_nat >= 2 & pc10position_hhgreqincnohb_nat <= 5)
& over20grossnohb_nohbben == 0, 1, 0 )]
dt1315_noshare_1bu_nopen[ , JAMnohbwork_greqinc := ifelse((pc10position_hhgreqincnohb_nat >= 2 & pc10position_hhgreqincnohb_nat <= 5)
& hrp_nowork == FALSE, 1, 0 )]
dt1315_noshare_1bu_nopen <- dt1315_noshare_1bu[ head_pensioner == 0 & is_HRP ==1 & (is.na(grossweight) == F), ]
pc10val_hhgreqinc_nosharenopen <- calculate.percentile.thresholds(DT = dt1315_noshare_1bu_nopen[year == "1415", ],
distr_var = ~hh_grossinc_eq,
region_form = ~GVTREGN, perc_width = "10")
d
dt1315_noshare_1bu_nopen <- assign.percentile(dt1315_noshare_1bu_nopen[year == "1415", ],
pc10val_hhgreqinc_nosharenopen, "hh_grossinc_eq", perc_width = "10")
setnames(dt1315_noshare_1bu_nopen, "pc10position_reg", "pc10position_hhgreqinc_reg")
setnames(dt1315_noshare_1bu_nopen, "pc10position_nat", "pc10position_hhgreqinc_nat")
dt1315_noshare_1bu_nopen[ year == "1314", pc10position_hhgreqinc_nat]
dt1315_noshare_1bu_nopen[ year == "1415", pc10position_hhgreqinc_nat]
#rank households - 10% percentiles, gross equivalised household income -hb, equivalised
pc10val_hhgreqinc_nohb_nosharenopen <- calculate.percentile.thresholds(DT = dt1315_noshare_1bu_nopen[year == "1415", ],
distr_var = ~hh_grossinc_nohb_eq,
region_form = ~GVTREGN, perc_width = "10")
dt1315_noshare_1bu_nopen <- assign.percentile(dt1315_noshare_1bu_nopen[year == "1415", ],
pc10val_hhgreqinc_nohb_nosharenopen,
"hh_grossinc_nohb_eq", perc_width = "10")
setnames(dt1315_noshare_1bu_nopen, "pc10position_reg", "pc10position_hhgreqincnohb_reg")
setnames(dt1315_noshare_1bu_nopen, "pc10position_nat", "pc10position_hhgreqincnohb_nat")
#Create flags for JAM definition groups #
dt1315_noshare_1bu_nopen[ , JAMbase_greqinc := ifelse(pc10position_hhgreqinc_nat >= 2 & pc10position_hhgreqinc_nat <= 5, 1, 0 )]
dt1315_noshare_1bu_nopen[ , JAMrf_greqinc := ifelse((pc10position_hhgreqinc_nat >= 2 & pc10position_hhgreqinc_nat <= 5)
& over20gross_allben == 0, 1, 0 )]
dt1315_noshare_1bu_nopen[ , JAMnohb_greqinc := ifelse((pc10position_hhgreqincnohb_nat >= 2 & pc10position_hhgreqincnohb_nat <= 5), 1, 0 )]
dt1315_noshare_1bu_nopen[ , JAMnohbrf_greqinc := ifelse((pc10position_hhgreqincnohb_nat >= 2 & pc10position_hhgreqincnohb_nat <= 5)
& over20grossnohb_nohbben == 0, 1, 0 )]
dt1315_noshare_1bu_nopen[ , JAMnohbwork_greqinc := ifelse((pc10position_hhgreqincnohb_nat >= 2 & pc10position_hhgreqincnohb_nat <= 5)
& hrp_nowork == FALSE, 1, 0 )]
dt1315_noshare_1bu_nopen[year == "1315", JAMbase_greqinc]
dt1315_noshare_1bu_nopen[year == "1314", JAMbase_greqinc]
dt1315_noshare_1bu_nopen[year == "1415", JAMbase_greqinc]
t_samplesize <- dt1315_noshare_1bu_nopen[ JAMbase_greqinc == 1 & year == "1415",
.N, by=.(GVTREGN)]
write.csv( t_samplesize, file = "./Results/nopen_JAMs_1415/nopenJAMbase_subsample_size.csv")
t_samplesize <- dt1315_noshare_1bu_nopen[ JAMrf_greqinc == 1 & year == "1415",
.N, by=.(GVTREGN)]
write.csv( t_samplesize, file = "./Results/nopen_JAMs_1415/nopenJAMrf_subsample_size.csv")
t_samplesize <- dt1315_noshare_1bu_nopen[ JAMnohb_greqinc == 1 & year == "1415",
.N, by=.(GVTREGN)]
write.csv( t_samplesize, file = "./Results/nopen_JAMs_1415/nopenJAMnohb_subsample_size.csv")
t_samplesize <- dt1315_noshare_1bu_nopen[ JAMnohbrf_greqinc == 1 & year == "1415",
.N, by=.(GVTREGN)]
write.csv( t_samplesize, file = "./Results/nopen_JAMs_1415/nopenJAMnohbrf_subsample_size.csv")
t_samplesize <- dt1315_noshare_1bu_nopen[ JAMnohbwork_greqinc == 1 & year == "1415",
.N, by=.(GVTREGN)]
write.csv( t_samplesize, file = "./Results/nopen_JAMs_1415/nopenJAMnohbwork_subsample_size.csv")
t_samplesize <- dt1315_noshare_1bu_nopen[ JAMnohbrf_greqinc == 1 & year == "1415",
.N, by=.(grpd_region1)]
write.csv( t_samplesize, file = "./Results/nopen_JAMs_1415/nopenJAMnohbrf_subsample_size_grpd.csv")
des1315_nosharenopen <- svydesign(ids = ~1, weights = ~grossweight,
data = dt1315_noshare_1bu_nopen[is_HRP & (is.na(grossweight) == F), ])
des1315_prsnosharenopen <- update(des1315_prsnosharenopen, JAMbase_greqinc = factor(JAMbase_greqinc))
svymean(~JAMbase_greqinc, design = subset(des1315_prsnosharenopen, year == "1415" & under_ahc_mis == 1), na.rm = TRUE)
des1315_nosharenopen <- update(des1315_nosharenopen, JAMbase_greqinc = factor(JAMbase_greqinc))
svymean(~JAMbase_greqinc,
design = subset(des1315_nosharenopen, year == "1415" & & grpd_tenure == 1 & under_ahc_mis == 1), na.rm = TRUE)
svymean(~JAMbase_greqinc,
design = subset(des1315_nosharenopen, year == "1415" & grpd_tenure == 1 & under_ahc_mis == 1), na.rm = TRUE)
svytotal(~JAMbase_greqinc,
design = subset(des1315_nosharenopen, year == "1415" & grpd_tenure == 1 & under_ahc_mis == 1), na.rm = TRUE)
des1315_prsnosharenopen <- update(des1315_prsnosharenopen, JAMnohbrf_greqinc = factor(JAMnohbrf_greqinc))
svymean(~JAMnohbrf_greqinc,
design = subset(des1315_nosharenopen, year == "1415" & grpd_tenure == 1 & under_ahc_mis == 1), na.rm = TRUE)
des1315_prsnosharenopen <- update(des1315_prsnosharenopen, JAMnohbrf_greqinc = factor(JAMnohbrf_greqinc))
des1315_nosharenopen <- update(des1315_nosharenopen, JAMnohbrf_greqinc = factor(JAMnohbrf_greqinc))
svymean(~JAMnohbrf_greqinc,
design = subset(des1315_nosharenopen, year == "1415" & grpd_tenure == 1 & under_ahc_mis == 1), na.rm = TRUE)
svytotal(~JAMnohbrf_greqinc,
design = subset(des1315_nosharenopen, year == "1415" & grpd_tenure == 1 & under_ahc_mis == 1), na.rm = TRUE)
t_samplesize <- dt1315_noshare_1bu_nopen[ JAMnohbrf_greqinc == 1 & grpd_tenure == 1 & year == "1415",
.N, by=.(grpd_region1)]
write.csv( t_samplesize, file = "./Results/nopen_JAMs_1415/nopenJAMnohbrfprs_subsample_size_grpd.csv")
svymean(~JAMnohbrf_greqinc, design = subset(des1315_prsnosharenopen, aff_shared_noincben == 0), na.rm = TRUE)
svymean(~JAMbase_greqinc, design = subset(des1315_nosharenopen,
year == "1415" & grpd_tenure == 1 & aff_shared_noincben == 0), na.rm = TRUE)
svymean(~JAMnohbrf_greqinc, design = subset(des1315_nosharenopen,
year == "1415" & grpd_tenure == 1 & aff_shared_noincben == 0), na.rm = TRUE)
svytotal(~(JAMnohbrf_prs & under_MIS_prs), des1315_nosharenopen, na.rm = TRUE)
des1315_nosharenopen <- update(des1315_nosharenopen, JAMbase_prs = ifelse(JAMbase_greqinc == 1 & grpd_tenure ==1, 1, 0))
des1315_nosharenopen <- update(des1315_nosharenopen, JAMbase_prs = factor(JAMbase_prs))
svymean(~JAMbase_prs, des1315_nosharenopen, na.rm = TRUE)
svytotal(~JAMbase_prs, des1315_nosharenopen, na.rm = TRUE)
des1315_nosharenopen <- update(des1315_nosharenopen, JAMnohbrf_prs = ifelse(JAMnohbrf_greqinc == 1 & grpd_tenure ==1, 1, 0))
des1315_nosharenopen <- update(des1315_nosharenopen, JAMnohbrf_prs = factor(JAMnohbrf_prs))
svymean(~JAMnohbrf_prs, des1315_nosharenopen, na.rm = TRUE)
svytotal(~JAMnohbrf_prs, des1315_nosharenopen, na.rm = TRUE)
svyquantile(~hh_grossinc, design = subset(des1315_prsnosharenopen, aff_shared_noincben == 0), quantiles = 0.5, na.rm=TRUE)
svyquantile(~hh_grossinc, design = subset(des1315_prsnosharenopen, under_ahc_mis == 1 ), quantiles = 0.5, na.rm=TRUE)
svyquantile(~hh_grossinc, design = subset(des1315_prsnosharenopen, JAMbase_greqinc == 1 ), quantiles = 0.5, na.rm=TRUE)
svyquantile(~hh_grossinc, design = subset(des1315_prsnosharenopen, JAMnohbrf_greqinc == 1 ), quantiles = 0.5, na.rm=TRUE)
svyquantile(~hh_grossinc, design = subset(des1315_nosharenopen,
year == "1415" & grpd_tenure == 1 & aff_shared_noincben == 0),
quantiles = 0.5, na.rm=TRUE)
svyquantile(~hh_grossinc, design = subset(des1315_nosharenopen,
year == "1415" & grpd_tenure == 1 & under_ahc_mis == 1 ),
quantiles = 0.5, na.rm=TRUE)
svyquantile(~hh_grossinc, design = subset(des1315_nosharenopen,
year == "1415" & grpd_tenure == 1 & JAMbase_greqinc == 1 ),
quantiles = 0.5, na.rm=TRUE)
svyquantile(~hh_grossinc, design = subset(des1315_nosharenopen,
year == "1415" & grpd_tenure == 1 & AMnohbrf_greqinc == 1 ),
quantiles = 0.5, na.rm=TRUE)
svyquantile(~hh_grossinc, design = subset(des1315_nosharenopen,
year == "1415" & grpd_tenure == 1 & JAMnohbrf_greqinc == 1 ),
quantiles = 0.5, na.rm=TRUE)
t_samplesize <- dt1315_noshare_1bu_nopen[ JAMnohbrf_greqinc == 1 & grpd_tenure == 1 & year == "1415",
.N, by=.(GVTREGN)]
write.csv( t_samplesize, file = "./Results/nopen_JAMs_1415/nopenJAMnohbrfprs_subsample_size.csv")
des1315_nosharenopen <- update(factor(OAEXPNS))
colnames(dt1315_noshare_1bu_nopen)
des1315_nosharenopen <- update(des1315_nosharenopen, OAEXPNS = factor(OAEXPNS))
attr(dt1315_noshare_1bu_nopen[, OAEXPNS], "labels")
dt1315_noshare_1bu_nopen[, OAEXPNS]
des1315_nosharenopen <- update(des1315_nosharenopen, OAEXPNS = factor(OAEXPNS))
plot.survey.grpdregion(my_design = subset(des1315_nosharenopen,
JAMnohbrf_greqinc == 1 & grpd_tenure == 1 & year == "1415"),
"./Results/nopen_JAMs_1415", "OAEXPNS",
var_levels = c("OAEXPNS1", "OAEXPNS2"),
var_labels = c("Could afford", "Couldn't afford"),
p_title = "Could afford a £200 expense", region = "grpd_region1")
plot.survey.grpdregion(my_design = subset(des1315_nosharenopen,
JAMnohbrf_greqinc == 1 & grpd_tenure == 1 & year == "1415"),
"./Results/nopen_JAMs_1415", "OAEXPNS",
var_levels = c("OAEXPNS1", "OAEXPNS2"),
var_labels = c("Could afford", "Couldn't afford"),
p_title = "Could afford a £200 expense", region = "grpd_region1")
dt1315_noshare_1bu_nopen[JAMnohbrf_greqinc == 1 & grpd_tenure == 1 & year == "1415", OAEXPNS]
dt1315_noshare_1bu_nopen[JAMnohbrf_greqinc == 1 & grpd_tenure == 1 & year == "1415"  & !is.na(OAEXPNS), OAEXPNS]
dt1315_noshare_1bu_nopen[JAMnohbrf_greqinc == 1 & grpd_tenure == 1 & year == "1415"  & !is.na(OAEXPNS) & is_HRP == 1, OAEXPNS]
dt1315_noshare_1bu_nopen[JAMnohbrf_greqinc == 1 & grpd_tenure == 1 & year == "1415"  & !is.na(OAEXPNS) & is_HRP == 1, .(SERNUM,OAEXPNS)]
dt1315_noshare_1bu_nopen[JAMbase_greqinc == 1 & grpd_tenure == 1 & year == "1415"  & !is.na(OAEXPNS) & is_HRP == 1, .(SERNUM,OAEXPNS)]
dt1315_noshare_1bu_nopen[JAMnohb_greqinc == 1 & grpd_tenure == 1 & year == "1415"  & !is.na(OAEXPNS) & is_HRP == 1, .(SERNUM,OAEXPNS)]
dt1315_noshare_1bu_nopen[aff_shared_noincben == 0 & grpd_tenure == 1 & year == "1415"  & !is.na(OAEXPNS) & is_HRP == 1, .(SERNUM,OAEXPNS)]
dt1315_noshare_1bu_nopen[aff_shared_noincben == 0 & grpd_tenure == 1 & year == "1314"  & !is.na(OAEXPNS) & is_HRP == 1, .(SERNUM,OAEXPNS)]
dt1315_noshare_1bu_nopen[under_ahc_mis == 1 & grpd_tenure == 1 & year == "1314"  & !is.na(OAEXPNS) & is_HRP == 1, .(SERNUM,OAEXPNS)]
dt1315_noshare_1bu_nopen[JAMnohbrf_greqinc == 1 & grpd_tenure == 1 & year == "1415", OAEXPNS]
dt1315_noshare_1bu_nopen[JAMnohbrf_greqinc == 1 & grpd_tenure == 1 & year == "1415", sum(is.na(OAEXPNS))]
dt1315_noshare_1bu_nopen[JAMnohbrf_greqinc == 1 & grpd_tenure == 1 & year == "1415", sum(!is.na(OAEXPNS))]
dt1315_noshare_1bu_nopen[JAMnohbrf_greqinc == 1 & grpd_tenure == 1 & year == "1415", sum(!is.na(OAHOWPY1))]
dt1315_noshare_1bu_nopen[grpd_tenure == 1 & year == "1314", sum(!is.na(OAHOWPY1))]
nmg_boe <- read.csv("./NMG_BOE_survey/BOENMG_surveyH22016.csv", header = TRUE)
nmg_boe <- read.csv("../NMG_BOE_survey/BOENMG_surveyH22016.csv", header = TRUE)
dt_nmg_boe <- data.table(nmg_boe)
colnames(dt_nmg_boe)
des_nmgboe <- svydesign(ids = ~1, weights = ~weight, data = dt_nmg_boe)
dt_nmg_boe[, sum(!is.na(fihhyr2_m))]
dt_nmg_boe[, sum(is.na(fihhyr2_m))]
dt_nmg_boe[ , equiv_weight := 0.67]
#add for other adults
dt_nmg_boe[ , equiv_weight := equiv_weight + (nadult-1)*0.33]
#add for children under 14 - assume majority of kids under 16 are also under 14
dt_nmg_boe[ , equiv_weight := equiv_weight + (numberchildren)*0.2]
#Make it a factor that income can be multiplied by
dt_nmg_boe[ , equiv_weight := 1/equiv_weight]
dt_nmg_boe[ , equiv_weight := equiv_weight + (nadults-1)*0.33]
dt_nmg_boe[ , equiv_weight := NULL]
dt_nmg_boe[ , grossinc_eq := NULL]
dt_nmg_boe[ , equiv_weight := 0.67]
#add for other adults
dt_nmg_boe[ , equiv_weight := equiv_weight + (nadults-1)*0.33]
dt_nmg_boe[ , equiv_weight := equiv_weight + (numberchildren)*0.2]
dt_nmg_boe[ , equiv_weight := 1/equiv_weight]
dt_nmg_boe[ , grossinc_eq := fihhyr2_m*equiv_weight]
dt_nmg_boe[ , fihhyr2_m]
nmg_boe <- read.csv("../NMG_BOE_survey/BOENMG_surveyH22016.csv", header = TRUE, stringsAsFactors = FALSE)
dt_nmg_boe <- data.table(nmg_boe)
dt_nmg_boe[, sum(fihhyr2_m != "don't know" & fihhyr2_m != "refused")]
dt_nmg_boe[ , fihhyr2]
dt_nmg_boe[ , equiv_weight := 0.67]
#add for other adults
dt_nmg_boe[ , equiv_weight := equiv_weight + (nadults-1)*0.33]
#add for children under 14 - assume majority of kids under 16 are also under 14
dt_nmg_boe[ , equiv_weight := equiv_weight + (numberchildren)*0.2]
#Make it a factor that income can be multiplied by
dt_nmg_boe[ , equiv_weight := 1/equiv_weight]
dt_nmg_boe[fihhyr2_m != "don't know" & fihhyr2_m != "refused" , grossinc_eq := fihhyr2_m*equiv_weight]
dt_nmg_boe[fihhyr2_m != "don't know" & fihhyr2_m != "refused" , grossinc_eq := as.double(fihhyr2_m)*equiv_weight]
dt_nmg_boe[ , .(fihhyr2_m, equiv_weight, grossinc_eq)]
dt1315_noshare_1bu_nopen[JAMnohbrf_greqinc==1, min(hh_grossinc_eq)]
dt1315_noshare_1bu_nopen[JAMnohbrf_greqinc==1, max(hh_grossinc_eq)]
dt1315_noshare_1bu_nopen[JAMnohbrf_greqinc==1 & grpd_tenure == 1, max(hh_grossinc_eq)]
dt1315_noshare_1bu_nopen[JAMnohbrf_greqinc==1 & grpd_tenure == 1, min(hh_grossinc_eq)]
dt1315_noshare_1bu_nopen[JAMnohb_greqinc == 1 & grpd_tenure == 1, min(hh_grossinc_eq)]
dt1315_noshare_1bu_nopen[JAMnohb_greqinc == 1 & grpd_tenure == 1, max(hh_grossinc_eq)]
dt1315_noshare_1bu_nopen[aff_shared_noincben == 0 & grpd_tenure == 1, max(hh_grossinc_eq)]
dt1315_noshare_1bu_nopen[aff_shared_noincben == 0 & grpd_tenure == 1, min(hh_grossinc_eq)]
dt1315_noshare_1bu_nopen[aff_shared_noincben == 0 & grpd_tenure == 1 & hh_grossinc_eq > 0, min(hh_grossinc_eq)]
dt1315_noshare_1bu_nopen[aff_shared_noincben == 0 & ECOBU!=6 & ECOBU!=7 & ECOBU!=8 & grpd_tenure == 1, max(hh_grossinc_eq)]
dt1315_noshare_1bu_nopen[aff_shared_noincben == 0 & ECOBU!=6 & ECOBU!=7 & ECOBU!=8 & grpd_tenure == 1, min(hh_grossinc_eq)]
dt1315_noshare_1bu_nopen[aff_shared_noincben == 0 & ECOBU!=6 & ECOBU!=7 & ECOBU!=8 & grpd_tenure == 1 & (hh_grossinc_eq > 0), min(hh_grossinc_eq)]
dt1315_noshare_1bu_nopen[aff_shared_noincben == 0 & hrp_nowork == FALSE & grpd_tenure == 1 & (hh_grossinc_eq > 0), min(hh_grossinc_eq)]
dt_nmg_boe[ , is_lowtomid := ifelse(grossinc_eq >= 12000 & grossinc_eq <= 35000, 1, 0)]
dt_nmg_boe[ , sum(is_lowtomid == 1)]
dt_nmg_boe[ !is.na(is_lowtomid), sum(is_lowtomid == 1)]
dt_nmg_boe[ !is.na(is_lowtomid) & tenure == 5, sum(is_lowtomid == 1)]
dt_nmg_boe[ tenure == 5, min(grossinc_eq)]
dt_nmg_boe[ tenure == 5, fihhyr2_m]
dt_nmg_boe[ tenure == 5, ]
dt_nmg_boe[ , tenure ]
dt_nmg_boe[ !is.na(is_lowtomid) & tenure == "Private rented", sum(is_lowtomid == 1)]
dt_nmg_boe[ !is.na(is_lowtomid) & tenure == "Mortgagor", sum(is_lowtomid == 1)]
dt_nmg_boe[ !is.na(is_lowtomid) & tenure == "Owner outright", sum(is_lowtomid == 1)]
dt_nmg_boe[ tenure == "Mortgagor", ]
dt_nmg_boe[ , tenure ]
dt_nmg_boe[ !is.na(is_lowtomid) & tenure == "Owned mortgage", sum(is_lowtomid == 1)]
dt_nmg_boe[ !is.na(is_lowtomid) & tenure == "Owned outright", sum(is_lowtomid == 1)]
des_nmgboe <- svydesign(ids = ~1, weights = ~weight, data = dt_nmg_boe)
colnames(dt_nmg_boe)
dt_nmg_boe[, us_upl_purp_f]
svymean(~us_upl_purp_f, design = subset(des_nmgboe, tenure == "Private rented" & is_lowtomid == 1), na.rm = TRUE)
require(sjPlot)
require(ggplot2)
require(RColorBrewer)
library("reshape2")
require("survey")
### Source and define calculating functions ####
## Make flatfiles for each year
source("./FRS_tools/make_flatfile.R")
##Logical flags for later analysis #
source("./FRS_tools/calculate_logical_flags.R")
## Calculate deflated household incomes
source("./FRS_tools/calculate_household_incomes.R")
source("./FRS_tools/calculate_weights.R")
## Tidy up tenure
source("./FRS_tools/tidy_tenure.R")
## Tidy up regions
source("./FRS_tools/tidy_regions.R")
## Region comparison plotting function
source("./FRS_tools/plot_survey_grpdregion.R")
## Calculate equivalising weights
source("./FRS_tools/calculate_equivalise.R")
## Calculate percentile values for a continuous distribution
source("./FRS_tools/calculate_percentile.R")
## Calculate percentile values for a continuous distribution
source("./FRS_tools/assign_percentile.R")
## Append 2015 MIS amounts
source("./FRS_tools/append_mis.R")
#make plots of household charactersitics
source("./FRS_tools/make_household_plots.R")
#compare charactersitics of JAM groups
source("./FRS_tools/compare_JAM_plots.R")
#compare charactersitics of all LIPR groups
source("./FRS_tools/compare_LIPR_plots.R")
source("./FRS_tools/compare_LIPR_plots_refine.R")
source("./FRS_tools/calculate_bedrooms.R")
flag.shared.ownership <- function (data_table){
shared_thresh <- read.csv("./shared_ownership_13141415thresholds.csv", header = TRUE,
colClasses = c("double", "double", "double", "character"), stringsAsFactors = FALSE)
shared_thresh <- data.table(shared_thresh)
#return(shared_thresh)
shared_keycols = c("GVTREGN", "year")
shared_cols = c("GVTREGN", "shared", "shared_deposit", "year" )
setkeyv(data_table, shared_keycols)
setkeyv(shared_thresh, shared_keycols)
data_table <- merge(data_table , shared_thresh[ , .SD, .SDcols = shared_cols], by = shared_keycols, all.x = TRUE)
data_table[ , aff_shared_noincben := ifelse( hh_grossinc_noincben >= shared, 1, 0 )]
data_table[ , cant_shareddep := ifelse( (TOTCAPB3 < (shared_deposit - 1000)) & (ADDMON == 2 | behind_debts==1), 1, 0 )]
#flag for shared ownership situation
data_table[ , affanddep_shared := 0]
data_table[ , affanddep_shared := ifelse(aff_shared_noincben==1 & cant_shareddep==1, 1 , 0)]
data_table[ , affanddep_shared := ifelse(aff_shared_noincben==1 & cant_shareddep==0, 2 , affanddep_shared)]
data_table[ , affanddep_shared := ifelse(aff_shared_noincben==0 , 0 , affanddep_shared)]
return(data_table)
}
### Make flatfiles ####
survey_dir <- "S:/@Communications, Policy and Campaigns/Research/STATS & INFO/Statistics/Household Surveys/"
dt_1415 <- make.flatfile(survey_dir, "1415")
dt_1314 <- make.flatfile(survey_dir, "1314")
dt_1415[ , year := "1415"]
dt_1314[ , year := "1314"]
l <- list(dt_1314, dt_1415)
dt_1315 <- rbindlist(l, fill = TRUE)
rm(l)
#Prep 1315 data set ####
dt_1315 <- calculate.logical.flags(dt_1315, "1315")
dt_1315 <- calculate.weights(dt_1315, 1)
dt_1315 <- tidy.tenure(dt_1315)
#Calculate equivalisation weights (according to HBAI spec)
dt_1315<- calculate.equivalise(dt_1315)
#calculate income, including equivalised
dt_1315 <- calculate.household.incomes(dt_1315, "FRS", TRUE)
dt_1315 <- flag.shared.ownership(dt_1315)
dt_1315 <- calculate.bedrooms(dt_1315)
dt_1315 <- tidy.regions(dt_1315, "1315")
dt_1315[ , not_1stbenu := ifelse(BENUNIT >1 , 1, 0)]
dt_1315[ , multiple_benu := ifelse( (sum(not_1stbenu) > 0), 1, 0 ), by = .(SERNUM, year) ]
#LIPR definition flags
#more than 20% of household's gross income from benefits (excluding tax credits) - same as Resolution Foundation definition
dt_1315[ , over20gross_allben := ifelse(((HBENINC - HHTXCRED )/(HHINC)) > 0.2, 1, 0)]
#more than 20% of household income-HB comes from non-HB benefits, modified RF definition
dt_1315[ , over20grossnohb_nohbben := ifelse(!is.na(hh_hbweekly),
(ifelse((HBENINC-hh_hbweekly - HHTXCRED)/(HHINC-hh_hbweekly) > 0.2, 1, 0)),
(ifelse((HBENINC- HHTXCRED)/(HHINC) > 0.2, 1, 0)))]
#remove households from sample with shared status and lodgers
dt1315_noshare <- dt_1315[ (has_lodger == 0 & HHSTAT == 1), ]
#select households with only 1 benefit unit - necessary for current shared ownership/MIS definitions of low income
dt1315_noshare_1bu <- dt1315_noshare[ multiple_benu == 0, ]
#Append AHC Minimum Income Standard for households - only works for 1 benefit unit households atm
dt1315_noshare_1bu <- append.mis(dt1315_noshare_1bu, "./MIS_2015.csv")
#Add for if AHC income is less than AHC MIS
dt1315_noshare_1bu[ , under_ahc_mis := ifelse(hh_gross_ahc < ahc_mis*52, 1, 0)]
#Restrict to households not headed by a pensioner
dt1315_noshare_1bu_nopen <- dt1315_noshare_1bu[ head_pensioner == 0 & is_HRP ==1 & (is.na(grossweight) == F), ]
des1315_nosharenopen <- svydesign(ids = ~1, weights = ~grossweight, data = dt1315_noshare_1bu_nopen[is_HRP & (is.na(grossweight) == F), ])
pc10val_hhgreqinc_nosharenopen <- calculate.percentile.thresholds(DT = dt1315_noshare_1bu_nopen[year == "1415", ],
distr_var = ~hh_grossinc_eq,
region_form = ~GVTREGN, perc_width = "10")
dt1315_noshare_1bu_nopen <- assign.percentile(dt1315_noshare_1bu_nopen[year == "1415", ],
pc10val_hhgreqinc_nosharenopen,
"hh_grossinc_eq", perc_width = "10")
setnames(dt1315_noshare_1bu_nopen, "pc10position_reg", "pc10position_hhgreqinc_reg")
setnames(dt1315_noshare_1bu_nopen, "pc10position_nat", "pc10position_hhgreqinc_nat")
#rank households - 10% percentiles, gross equivalised household income -hb, equivalised
pc10val_hhgreqinc_nohb_nosharenopen <- calculate.percentile.thresholds(DT = dt1315_noshare_1bu_nopen[year == "1415", ],
distr_var = ~hh_grossinc_nohb_eq,
region_form = ~GVTREGN, perc_width = "10")
dt1315_noshare_1bu_nopen <- assign.percentile(dt1315_noshare_1bu_nopen[year == "1415", ],
pc10val_hhgreqinc_nohb_nosharenopen,
"hh_grossinc_nohb_eq", perc_width = "10")
setnames(dt1315_noshare_1bu_nopen, "pc10position_reg", "pc10position_hhgreqincnohb_reg")
setnames(dt1315_noshare_1bu_nopen, "pc10position_nat", "pc10position_hhgreqincnohb_nat")
#Create flags for JAM definition groups #
dt1315_noshare_1bu_nopen[ , JAMbase_greqinc := ifelse(pc10position_hhgreqinc_nat >= 2 & pc10position_hhgreqinc_nat <= 5, 1, 0 )]
dt1315_noshare_1bu_nopen[ , JAMrf_greqinc := ifelse((pc10position_hhgreqinc_nat >= 2 & pc10position_hhgreqinc_nat <= 5)
& over20gross_allben == 0, 1, 0 )]
dt1315_noshare_1bu_nopen[ , JAMnohb_greqinc := ifelse((pc10position_hhgreqincnohb_nat >= 2 & pc10position_hhgreqincnohb_nat <= 5), 1, 0 )]
dt1315_noshare_1bu_nopen[ , JAMnohbrf_greqinc := ifelse((pc10position_hhgreqincnohb_nat >= 2 & pc10position_hhgreqincnohb_nat <= 5)
& over20grossnohb_nohbben == 0, 1, 0 )]
dt1315_noshare_1bu_nopen[ , JAMnohbwork_greqinc := ifelse((pc10position_hhgreqincnohb_nat >= 2 & pc10position_hhgreqincnohb_nat <= 5)
& hrp_nowork == FALSE, 1, 0 )]
des1315_nosharenopen <- svydesign(ids = ~1, weights = ~grossweight,
data = dt1315_noshare_1bu_nopen[is_HRP & (is.na(grossweight) == F), ])
des1315_nosharenopen <- update(des1315_nosharenopen, ADDMON = factor(ADDMON))
plot.survey.grpdregion(my_design = subset(des1315_nosharenopen,
JAMbase_greqinc == 1 & grpd_tenure == 1 & year == "1415"),
"./Results/nopen_JAMs_1415", "ADDMON",
var_levels = c("ADDMON1", "ADDMON2", "ADDMON3", "ADDMON4"),
var_labels = c("Do this", "Like to but can't afford", "Don't want to",  "Does not apply" ),
p_title = "Can save £10 a month", region = "grpd_region1")
plot.survey.grpdregion(my_design = subset(des1315_nosharenopen,
JAMbase_greqinc == 1 & grpd_tenure == 1 & year == "1415"),
"./Results/nopen_JAMs_1415", "ADDMON",
var_levels = c("ADDMON1", "ADDMON2", "ADDMON3", "ADDMON4"),
var_labels = c("Do this", "Like to but can't afford", "Don't want to",  "Does not apply" ),
p_title = "Can save £10 a month - numbers", svy_fun = svytotal, region = "grpd_region1")
source('S:/@Communications, Policy and Campaigns/Research/RESEARCH/More Affordable Homes/Future of low rent homes/low_rent_homes_report/FRS_tools/plot_survey_grpdregion.R')
plot.survey.grpdregion(my_design = subset(des1315_nosharenopen,
JAMbase_greqinc == 1 & grpd_tenure == 1 & year == "1415"),
"./Results/nopen_JAMs_1415", "ADDMON",
var_levels = c("ADDMON1", "ADDMON2", "ADDMON3", "ADDMON4"),
var_labels = c("Do this", "Like to but can't afford", "Don't want to",  "Does not apply" ),
p_title = "Can save £10 a month - numbers", svy_fun = svytotal, region = "grpd_region1")
require(sjPlot)
require(ggplot2)
require(RColorBrewer)
library("reshape2")
require("survey")
### Source and define calculating functions ####
## Make flatfiles for each year
source("./FRS_tools/make_flatfile.R")
##Logical flags for later analysis #
source("./FRS_tools/calculate_logical_flags.R")
## Calculate deflated household incomes
source("./FRS_tools/calculate_household_incomes.R")
source("./FRS_tools/calculate_weights.R")
## Tidy up tenure
source("./FRS_tools/tidy_tenure.R")
## Tidy up regions
source("./FRS_tools/tidy_regions.R")
## Region comparison plotting function
source("./FRS_tools/plot_survey_grpdregion.R")
## Calculate equivalising weights
source("./FRS_tools/calculate_equivalise.R")
## Calculate percentile values for a continuous distribution
source("./FRS_tools/calculate_percentile.R")
## Calculate percentile values for a continuous distribution
source("./FRS_tools/assign_percentile.R")
## Append 2015 MIS amounts
source("./FRS_tools/append_mis.R")
#make plots of household charactersitics
source("./FRS_tools/make_household_plots.R")
#compare charactersitics of JAM groups
source("./FRS_tools/compare_JAM_plots.R")
#compare charactersitics of all LIPR groups
source("./FRS_tools/compare_LIPR_plots.R")
source("./FRS_tools/compare_LIPR_plots_refine.R")
source("./FRS_tools/calculate_bedrooms.R")
flag.shared.ownership <- function (data_table){
shared_thresh <- read.csv("./shared_ownership_13141415thresholds.csv", header = TRUE,
colClasses = c("double", "double", "double", "character"), stringsAsFactors = FALSE)
shared_thresh <- data.table(shared_thresh)
#return(shared_thresh)
shared_keycols = c("GVTREGN", "year")
shared_cols = c("GVTREGN", "shared", "shared_deposit", "year" )
setkeyv(data_table, shared_keycols)
setkeyv(shared_thresh, shared_keycols)
data_table <- merge(data_table , shared_thresh[ , .SD, .SDcols = shared_cols], by = shared_keycols, all.x = TRUE)
data_table[ , aff_shared_noincben := ifelse( hh_grossinc_noincben >= shared, 1, 0 )]
data_table[ , cant_shareddep := ifelse( (TOTCAPB3 < (shared_deposit - 1000)) & (ADDMON == 2 | behind_debts==1), 1, 0 )]
#flag for shared ownership situation
data_table[ , affanddep_shared := 0]
data_table[ , affanddep_shared := ifelse(aff_shared_noincben==1 & cant_shareddep==1, 1 , 0)]
data_table[ , affanddep_shared := ifelse(aff_shared_noincben==1 & cant_shareddep==0, 2 , affanddep_shared)]
data_table[ , affanddep_shared := ifelse(aff_shared_noincben==0 , 0 , affanddep_shared)]
return(data_table)
}
### Make flatfiles ####
survey_dir <- "S:/@Communications, Policy and Campaigns/Research/STATS & INFO/Statistics/Household Surveys/"
dt_1415 <- make.flatfile(survey_dir, "1415")
dt_1314 <- make.flatfile(survey_dir, "1314")
dt_1415[ , year := "1415"]
dt_1314[ , year := "1314"]
l <- list(dt_1314, dt_1415)
dt_1315 <- rbindlist(l, fill = TRUE)
rm(l)
#Prep 1315 data set ####
dt_1315 <- calculate.logical.flags(dt_1315, "1315")
dt_1315 <- calculate.weights(dt_1315, 1)
dt_1315 <- tidy.tenure(dt_1315)
#Calculate equivalisation weights (according to HBAI spec)
dt_1315<- calculate.equivalise(dt_1315)
#calculate income, including equivalised
dt_1315 <- calculate.household.incomes(dt_1315, "FRS", TRUE)
dt_1315 <- flag.shared.ownership(dt_1315)
dt_1315 <- calculate.bedrooms(dt_1315)
dt_1315 <- tidy.regions(dt_1315, "1315")
dt_1315[ , not_1stbenu := ifelse(BENUNIT >1 , 1, 0)]
dt_1315[ , multiple_benu := ifelse( (sum(not_1stbenu) > 0), 1, 0 ), by = .(SERNUM, year) ]
#LIPR definition flags
#more than 20% of household's gross income from benefits (excluding tax credits) - same as Resolution Foundation definition
dt_1315[ , over20gross_allben := ifelse(((HBENINC - HHTXCRED )/(HHINC)) > 0.2, 1, 0)]
#more than 20% of household income-HB comes from non-HB benefits, modified RF definition
dt_1315[ , over20grossnohb_nohbben := ifelse(!is.na(hh_hbweekly),
(ifelse((HBENINC-hh_hbweekly - HHTXCRED)/(HHINC-hh_hbweekly) > 0.2, 1, 0)),
(ifelse((HBENINC- HHTXCRED)/(HHINC) > 0.2, 1, 0)))]
#remove households from sample with shared status and lodgers
dt1315_noshare <- dt_1315[ (has_lodger == 0 & HHSTAT == 1), ]
#select households with only 1 benefit unit - necessary for current shared ownership/MIS definitions of low income
dt1315_noshare_1bu <- dt1315_noshare[ multiple_benu == 0, ]
#Append AHC Minimum Income Standard for households - only works for 1 benefit unit households atm
dt1315_noshare_1bu <- append.mis(dt1315_noshare_1bu, "./MIS_2015.csv")
#Add for if AHC income is less than AHC MIS
dt1315_noshare_1bu[ , under_ahc_mis := ifelse(hh_gross_ahc < ahc_mis*52, 1, 0)]
#Restrict to households not headed by a pensioner
dt1315_noshare_1bu_nopen <- dt1315_noshare_1bu[ head_pensioner == 0 & is_HRP ==1 & (is.na(grossweight) == F), ]
des1315_nosharenopen <- svydesign(ids = ~1, weights = ~grossweight, data = dt1315_noshare_1bu_nopen[is_HRP & (is.na(grossweight) == F), ])
